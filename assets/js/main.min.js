function lazyloadFallback(e){const t=delayedLoadingOnEvents(!1,e);document.addEventListener("scroll",t),window.addEventListener("resize",t),window.addEventListener("orientationchange",t)}function delayedLoadingOnEvents(e,t){const n=function(){!1===e&&(e=!0,setTimeout((function(){t.forEach((function(e){e.getBoundingClientRect().top<=window.innerHeight&&e.getBoundingClientRect().bottom>=0&&"none"!==getComputedStyle(e).display&&(e.src=e.dataset.src,e.srcset=e.dataset.srcset,e.classList.remove("lazy"),0===(t=t.filter((function(t){return t!==e}))).length&&(document.removeEventListener("scroll",n),window.removeEventListener("resize",n),window.removeEventListener("orientationchange",n)))})),e=!1}),200))};return n}document.addEventListener("DOMContentLoaded",(function(){let e=[].slice.call(document.querySelectorAll("img.lazy"));if("IntersectionObserver"in window){let t=new IntersectionObserver((function(e,n){e.forEach((function(e){if(e.isIntersecting){let n=e.target;n.src=n.dataset.src,n.srcset=n.dataset.srcset,n.classList.remove("lazy"),t.unobserve(n)}}))}));e.forEach((function(e){t.observe(e)}))}else lazyloadFallback(e)}));